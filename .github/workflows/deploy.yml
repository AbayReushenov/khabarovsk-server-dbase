name: Deploy to Render

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        SUPABASE_URL: "dummy_url"
        SUPABASE_SERVICE_KEY: "dummy_key"
        GIGACHAT_CREDENTIALS: ""
        DATABASE_URL: "dummy_db_url"
      run: |
        pytest tests/ -v --tb=short

    - name: Check code format with black (if available)
      run: |
        pip install black || echo "Black not available, skipping format check"
        black --check . || echo "Code formatting check skipped"
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (optional)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Build Docker image
      run: |
        docker build -t habarovsk-forecast-buddy .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 \
          -e SUPABASE_URL="dummy_url" \
          -e SUPABASE_SERVICE_KEY="dummy_key" \
          -e GIGACHAT_CREDENTIALS="" \
          -e DATABASE_URL="dummy_db_url" \
          habarovsk-forecast-buddy

        # Wait for container to start
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8000/api/v1/health || exit 1

        # Stop test container
        docker stop test-container

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
            -d '{}'
          echo "Deployment triggered successfully"
        else
          echo "Render credentials not configured. Skipping deployment."
          echo "To enable automatic deployment:"
          echo "1. Set RENDER_API_KEY secret in GitHub repository"
          echo "2. Set RENDER_SERVICE_ID secret in GitHub repository"
        fi

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully"
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "⚠️ Deployment skipped (not main/master branch or missing credentials)"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
